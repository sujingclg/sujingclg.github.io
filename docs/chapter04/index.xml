<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>第4章 光线追踪 on 计算机图形学基础</title><link>https://sujingclg.github.io/docs/chapter04/</link><description>Recent content in 第4章 光线追踪 on 计算机图形学基础</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sujingclg.github.io/docs/chapter04/index.xml" rel="self" type="application/rss+xml"/><item><title>4.1 基础光线追踪算法</title><link>https://sujingclg.github.io/docs/chapter04/4-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/chapter04/4-1/</guid><description>4.1 基础光线追踪算法 # The Basic Ray-Tracing Algorithm
光线追踪器通过在某个时间计算一个像素工作，对每个像素，基本的任务是查找被这个像素在图像上看到的物体。每个像素从不同方向上“观察”，任何被像素看到的物体必须与视线相交。视线是指一束从视口发射的，沿着正在观察的相素的观察方向的射线。我们尤其要关注的物体是与视线相交的，离摄像机最近的物体，因为他阻挡了视线后方的所有物体。一旦发现了这个物体，着色程序将根据交点，表面法线，以及其他信息（依赖于期望的渲染类型）计算这个像素的颜色值。图4.1展示了这个过程，光线与两个三角形相交，但只有第一个三角形发生碰撞，因此只有它被着色。
图4.1 光线被“追踪”到场景中，并且第一个碰撞到的物体就是通过像素看到的物体。在这个例子中，T2三角形被返回 因此，一个基本的光线追踪器包含3个部分
产生射线：基于摄像几何学计算每个像素的视线的源和目标； 射线相交：查找与视线相交的最近的物体； 着色：根据相交的结果计算像素的颜色。 基本的光线追踪程序的结构是：
for each pixel do compute viewing ray find first object hit by ray and its surface normal n set pixel color to value computed from hit point, lights, and n 本章只讲解光线产生、光线相交和着色的基本方法，这已经足够阐述一个简单的光线追踪器。第12章将要介绍的更加有效率的光线相交技术可以用在更为实际的可用系统，同时，光线追踪器的真正潜力将在第14章中更高级的渲染技术中体现出来。</description></item><item><title>4.2 透视投影</title><link>https://sujingclg.github.io/docs/chapter04/4-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/chapter04/4-2/</guid><description>4.2 透视投影 # Perspective
对于如何在2D绘画或绘图上展示一个3D物体或场景的问题，艺术家们在计算机科学家开始之前已经有数百年的研究历史了。照片同样是使用2D图像展现3D厂家。虽然制作图像的非常规方法有很多，从立体主义绘画到鱼眼镜头（图4.2）再到外设照相机，但艺术、摄影以及计算机图形学的标准方法都是线性透视（linear perspective），将三维物体投射到图像平面上，使场景中的直线变成图像中的直线。
图4.2 使用鱼眼镜头得到的图像并不是线性透视图像。图片由Philip Greenspun提供。 最简单的投影类型为平行投影，在这种类型的投影中，3D空间中的点沿着投影方向移动，直到与图像平面相交，从而映射成2D平面上的点（图4.3-4.4）。产生的视图由选择的投影方向和图像平面决定。如果图像平面与视图方向垂直，产生的投影叫做正交投影；否则叫做倾斜投影。
一些书籍对平行于坐标轴的投影方向仍在沿用“正投影”的名称。 图4.3 当投影线与图像平面平行和垂直时，产生的投影视图称为正交投影。 图4.4 与图像平面成某个角度的平行投影成为倾斜投影（右图）。在透视投影中，投影线全部穿过观察点，而非互相平行（左图）。图示中的透视图是非倾斜的，因为绘制出的穿过图像中心的投影线将垂直于图像平面。 平行投影常用于机械和建筑绘图，因为这种投影方式可以保持直线的平行，也可以保持平行于图像平面的平面对象的大小和形状。
平行投影的优点也是它的局限性。在我们的日常生活中，物体离得越远，看上去就越小，正因如此，延伸到远处的平行直线看上去并不平行。这是因为眼睛和照相机不会从一个单一的观察方向采集光线；它们采集通过一个特定观察点(viewpoint)的光线。正如文艺复兴以来艺术家们所认为的那样，我们可以通过透视投影生成自然视图(natural-looking views)：我们只是沿着穿过一个点（观察点）的直线投影，而不是沿着平行线投影（图4.4）。通过这种方式，离观察点更远的物体在投影时就会很自然地变得更小。一个透视图取决于选择的观察点（而不是投影方向）和成像平面。和平行视图一样，也存在倾斜和非倾斜的透视图；其区别在于是否是基于图像中心的投影方向进行投影。
你也许已经学习过三点透视的艺术规范（一种手工构造透视图的方法）（图4.5）。关于透视图的一个令人惊讶的事实是，如果我们遵循透视图下的简单数学规则，那么透视图绘制的所有规则都将被自动遵循：物体直接被投射到眼睛，它们被绘制在眼前看到的视图平面上。
图4.5 在三点透视中，艺术家定义了平行线交会的消失点(vanishing points)。平行水平线将在水平线上相交于一点。每个平行线集合都有自己的消失点。如果我们实现的透视投影基于正确的几何原则，这些规则将被自动遵循。</description></item><item><title>4.3 视线的计算</title><link>https://sujingclg.github.io/docs/chapter04/4-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/chapter04/4-3/</guid><description>4.3 视线的计算 # Computing View Rays
我们已经在前面的部分中学习到了光线产生的基本工具是观察点（或者说观察方向）和成像平面。有很多方法计算摄像机几何的细节；在本节中，我们将阐述一种基于标准正交基(orthonormal bases)的方法，它可以支持常规视图、倾斜平行视图和正交视图。
为了生成射线，我们首先需要一个射线的数学表达式。射线实际上只是一个原点和一个传播方向；一个三维参数线就是个理想的射线。正如我们在2.7.7节讨论的那样，成像平面上从眼睛e发出，经过点s的三维参数线由下式定义：
\[{\rm p}(t) = {\rm e} &amp;#43; t ({\rm s} - {\rm e})\] 上式应该以这种方式解读：“我们从e沿着向量(s-e)前进t个距离来找到点p”。所以给定一个t，我们可以定义一个点p。点e是是射线的起点，s-e是射线的方向。
注意，p(0) = e，p(1) = s，更一般的，如果0 &amp;lt; t~1~ &amp;lt; t~2~，那么p(t~1~)将比p(t~2~)距离眼睛更近。同样地，如果t &amp;lt; 0，那么p(t)将在眼睛的“后方”。这些事实在我们查找视线范围内的（不在眼睛后方）、被光线照射到的、离观察者最近的物体时会很有用。
光线在代码中总是使用某种存储了位置和方向的结构体或对象来表示。例如，在一个object-oriented程序中我们可能写出如下程序：
class Ray Vec3 o | ray origin Vec3 d | ray direction Vec3 evaluate(real t) return o + td 我们假定Vec3类表示了一个三维向量，并且支持常规的算术运算。
为了计算一个视线(viewing ray)，我们需要知道 e (已经给出) 和 s 。求解 s 似乎很复杂，但如果我们从正确的坐标系下看此问题，就会发现他实际上是显而易见的。
所有我们的射线生成方法都源自于一个正交坐标框架，被称为相机框架（图4.7），在图中我们标记为e，作为观察点，同时u，v和w作为三个基础向量，
我们所有的光线生成方法都是从一个正交坐标系开始的，这个坐标系叫做相机坐标系，我们用e表示，它代表视点，或者观察点，u、v和w代表三个基向量，分别指向右边、上边和后边，三个基向量正好形成了一个右手坐标系。最常见的构造相机坐标系的方法是用观察点(e)，观察方向(w)，和向上的向量 (用于在观察方向和向上方向定义的平面上构造一个具有v和w的基)，使用2.</description></item></channel></rss>