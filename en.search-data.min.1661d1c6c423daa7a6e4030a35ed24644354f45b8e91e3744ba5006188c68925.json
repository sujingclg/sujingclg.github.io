[{"id":0,"href":"/posts/games101-note/","title":"Games101 笔记","section":"Blog","content":"之前的内容\n从长宽比和垂直方向的可视角度可以推算出水平方向的可视角度。此外也可推算出正交投影的远近、左右、上下信息。\n光栅化 (Rasterization) #  离散化三角形 (Triangles) #    What is a screen?\n An array of pixels Size of the array: resolution A typical kind of raster display    Raster == screen in German（屏幕的德语词汇）\n Rasterize == drawing onto the screen    Pixel (FYI, short for “picture element”)\n For now: A pixel is a little square with uniform color Color is a mixture of (red, green, blue)    光栅化步骤 #    从变换空间[-1,1]^3^映射到到屏幕空间。首先忽略z方向，使用视口变换将xy空间映射到屏幕。\n视口变换：把[-1,1]^2^变换为[0,width] x [0,height]的屏幕空间。视口变换矩(Viewport transform matrix)阵如下，除以2是因为原空间的宽高都是2，最后一列是平移变换，将原点定义到屏幕中心(否则中心在屏幕左下角)。\n  $$   \\[M_{viewprot} = \\begin{bmatrix} {width \\over 2}\u0026amp;0\u0026amp;0\u0026amp;{width \\over 2} \\\\ 0\u0026amp;{height \\over 2}\u0026amp;0\u0026amp;{width \\over 2} \\\\ 0\u0026amp;0\u0026amp;1\u0026amp;0 \\\\ 0\u0026amp;0\u0026amp;0\u0026amp;1 \\end{bmatrix}\\]  $$\n 将3D模型中的三角形片元打散成像素点，以便渲染到屏幕上。\n采样(Sampling)：把一个函数离散化的过程，即将离散的自变量带入函数，获取到离散的值的过程。在光栅化过程中，采样是指用屏幕的像素中心点的位置坐标带入到三角形片元，得到此像素的亮度值和颜色值。\n此步骤的关键是如何判断一个坐标点是否在三角形内部，可以使用叉积判断。假设有三角形ABC和点Q。如果向量AB和向量AQ的叉积大于0，说明Q点在向量AB的左侧（右手定则）。如果BC和BQ，CA和CQ都大于0，说明Q在三角形ABC内部，否则不是。因此Q在三角形ABC内部的充要条件是三个叉积都为正或都为负。\n  反走样与深度缓冲 #  Antialiasing and Z-Buffering\n走样造成的负面效果 #  Artifacts due to sampling - “Aliasing”\n Jaggies – sampling in space 锯齿 Moire – undersampling images 摩尔纹 Wagon wheel effect – sampling in time 车轮效应 [Many more] …  反走样的措施 #   增加采样率 \u0026ndash; Increase sampling rate 在采样之前先做模糊或滤波处理，可以抗锯齿。从频域角度看，先移除高频信号，然后采样。 Antialiasing By Supersampling (MSAA) \u0026ndash; 在一个像素内部设置多个采样点，用于计算三角形片元覆盖此像素的百分比。此方法本质上是通过更多的采样点来近似模糊操作。  模糊处理的方法 #  傅里叶变换可以把一个函数从时域变换为频域。从图像角度看，可以将图像的空间坐标信息视为时域空间，从而通过傅里叶变换成频域信息，之后即可进行滤波操作。对于一般拍摄的图片，低频信号携带的信息远远多于高频信号。此处高频信号指图片上变化非常明显的区域，比如深色和浅色的交界处、人像的边界等。滤波分为：高通滤波(滤除低频信号)，低通滤波(滤除高频信号)，带通滤波(只保留中间某个频率范围的信号)。因此，模糊处理属于低通滤波。\nFiltering = Convolution (= Averaging) \u0026ndash; 滤波 == 卷积 (== 平均)\n卷积定理：时域的卷积 == 频域的乘积，时域的乘积 == 频域的卷积\n如下图所示，每个像素都是周围3x3像素范围内取平均值，最终得到一幅模糊图像，此为卷积操作。卷积定理说明，可以先对图像做傅里叶变换，把时域信息变成频域信息，同时可以对3x3的卷积和做傅里叶变换，之后将两者相乘的结果做逆傅里叶变换，最终得到的图像与对图像做卷积操作得到的模糊图像相同。\n其中，3x3的卷积盒成为box filter，此box越大，则傅里叶变换的频域图面积越小，图像越模糊。反之，box越小，频域图面积越大，图像越清晰。\n从频域角度分析走样产生的原因 #  Sampling = Repeating Frequency Contents 采样相当于重复频域的内容。\n如下图所示，a图表示一个时域信号函数，b图是此信号函数经过傅里叶变换得到的频域函数。c图是冲击函数，冲击函数和a图的信号函数相乘得到采样结果(e图)。d图是c图冲击函数经过傅里叶变换后得到的频域上的冲击函数。根据卷积定理：==时域上的乘积相当于频域上的卷积==，b卷积d得到图f。从图中可以看出，时域上离散的采样点变成了频域上重复的频域内容。因此，采样就是在重复原始信号的频谱。\n因此，采样率增大导致原始信号的频谱在频域轴上的间隔变小，频谱发生了混叠，从而产生走样现象。\n通过去除高频信号，可以移除低采样率下混叠部分的频谱信息，从而实现反走样。\nZ-Buffer #  对几何体近似深度排序存在困难，但是对像素进行深度排序很容易。此方法有 frame buffer 和 depth buffer 两套缓冲系统。frame buffer 用于缓冲颜色信息，depth buffer(z-buffer) 用于缓冲深度信息。如果摄像机离物体越近，其z值越小，反之越大。\n初始深度缓冲值设置为无穷大，在光栅化过程中执行如下算法。此算法时间复杂度为 O(n)。\nfor (each triangle T) for (each sample (x,y,z) in T) if (z \u0026lt; zbuffer[x,y]) // closest sample so far framebuffer[x,y] = rgb; // update color zbuffer[x,y] = z; // update depth 着色 (Shading) #   定义：对不同的物体应用不同材质的过程。 着色具有局部性，即不考虑阴影。  Blinn-Phong Reflectance Model #  分解为漫反射、高光、环境光三项。\n漫反射 - Diffuse #  只考虑光照强度和方向，不考虑观察方向。 $$ L_d = k_d \\frac{I}{r^2}{\\rm max}(0, \\vec n \\cdot \\vec l) $$ 其中：\n L~d~ : diffusely reflected light k~d~ : diffuse coefficient (color) I/r^2^ : energy arrived at the shading point max(0, n · l) : energy received by the shading point  高光 - Specular Term #  $$ 半程向量: h = {\\rm bisector}(\\vec v, \\vec l) = \\frac {\\vec v + \\vec l}{||\\vec v + \\vec l||} \\ L_s = k_s \\frac{I}{r^2} {\\rm max}(0, {\\rm cos} \\alpha)^p = k_s \\frac{I}{r^2} {\\rm max}(0, \\vec n \\cdot \\vec h)^p $$\n 半程向量为入射光线与反射光线在观察点处的角平分线所在的向量。 当且仅当半程向量接近物体表面法线时，反射光线呈现高光态。 指数p值越大，越接近镜面，表面越光滑。  环境光 - Ambient #  $$ L_a = k_a + I_a $$\n 环境光是常数颜色，与光线和观察角度无关。同时会对所有光源加上同样的平均光照强度。 保证视口中的所有物体都被光照覆盖，没有黑区。  最终的Blinn-Phong反射模型公式 #  $$ L = L_a + L_d + L_s = k_aI_a + k_d(I/r^2){\\rm max}(0, \\vec n \\cdot \\vec l) + k_s(I/r^2){\\rm max}(0, \\vec n \\cdot \\vec h)^p $$\n着色频率 (Shading Frequencies) #  Shade each triangle (Flat shading) #  Shade each vertex (Gouraud shading) #  计算每个顶点的法线，从而计算出顶点颜色，三角形内部颜色通过顶点间插值得到。\nShade each pixel (Phong shading) #  计算每个顶点的法线，三角形内部每个像素上的法线通过顶点间的法线插值得到，从而计算出每个像素的颜色。\n图形管线(实时渲染) #  Graphics (Real-time Rendering) Pipeline\n用户并不需要对每个fragment分别编写渲染函数，因为渲染函数会被作用在每个fragment上，所以不需要在其中写for循环。\n纹理映射 (Texture Mapping) #  光线追踪 (Ray Tracing) #  光线追踪和光栅化是两种不同的成像方式。之所以需要光线追踪，是因为光栅化在处理全局效果方面表现不好，尤其是光线弹射超过一次的场景。全局效果(Global effects)包括软阴影(Soft shadows)，光面反射(Glossy reflection)，间接光照(Indirect illumination)。\n光栅化是一种很快的、但是很近似的渲染方法，因此图像质量较低。光栅化可以轻松做到实时渲染，实时渲染要求每秒超过30帧。\n光线和三角形片元求交，可以分解为两步：光线和三角形片元所在平面求交；交点是否在三角形片元内部。\nMöller Trumbore Algorithm: 一种快速判定光线和三角形片元是否相交的算法。\nWhitted-Style Ray Tracing：一种光线追踪的实现方式，此外还有路径追踪。\n包围盒 #  Axis-Aligned Bounding Box (AABB) (轴对⻬包围盒)：一种加速光线追踪的技术，其理论是假设空间中存在这样一种包围盒，其三个面和坐标系平行，将几何体完全包裹进来，如果光线不会和包围盒相交，则一定不会和其内部的几何体相交。此方法通过减少不必要的对三角形片元与光线的相交计算，大幅加速光线追踪的计算时间。\n如何判断包围盒与光线是否相交？\n 光线只在进入包围盒所有的平面才算进入包围盒。光线只在离开任一包围盒的平面就算离开包围盒。 对每个平面对，计算 t~min~ 和 t~max~ ，可以为负值。 对包围盒而言，t~enter~ = max{t~min~}, t~exit~ = min{t~max~}。 从物理规律上看，必然 t~enter~ \u0026lt; t~exit~ ，说明光线会在包围盒内部经过了一段时间，但他们不一定相交。 如果 t~exit~ \u0026lt; 0，说明包围盒在光线的后面，他们不相交。 如果 t~exit~ \u0026gt;= 0 且 t~enter~ \u0026lt; 0，说明光源在包围盒内部，他们必然相交。 光线和包围盒有交点的充要条件是 t~enter~ \u0026lt; t~exit~ \u0026amp;\u0026amp; t~exit~ \u0026gt;= 0。  AABB加速光线追踪的过程 #  两个概念：均匀的格子(Uniform grids)，空间划分(Spatial partitions)。\n均匀的格子(Uniform grids)：\n 找到一个包围盒，其内部有多个物体 将这个包围盒划分成一堆格子(grid) 标记出和物体的表面相交的格子 计算光线追踪时快速通过没有被标记的格子，对于标记的格子，先判断是否和格子内的物体相交，如果不相交直接通过，否则计算光线和物体的交点（慢）。  空间划分(Spatial partitions)：\n在物体分布稀疏的地方用大的格子，反之用小的格子，格子大小不一致，其他同 Uniform grids。典型的空间划分算法是 KD-Tree 算法，它是一种基于空间二分切分的算法。KD-Tree 的缺点是很难判断网格和三角形片元是否有交集，以及一个物体有可能出现在多个网格中，因此会被存储多次。\n另一种基于物体的划分(Object Partitions)是Bounding Volume Hierarchy (BVH)，它也是一种空间划分算法。由于避免了 KD-Tree 的那两个缺陷，成为了目前广泛使用的划分算法。\nBVH的步骤：\n 首先找到一个包围盒。 递归地把其内部的几何体(三角形片元)分为两个子部分，重新计算两个子部分的包围盒。 直到每个包围盒内部的三角形片元数量足够少时，停止递归。 将实际的Object记录在叶子节点里，其他部分做加速判断。  BVH的划分方法：\n 选择一个维度去划分 (类似于KD-Tree)。 总是选择节点中轴线最长的那个轴去划分。 对每个Object进行编号，取中间的那个编号的Object进行划分，可保证平衡划分。中间编号可以使用==快速选择算法==在O(n)时间找到。  BVH伪代码\nIntersect(Ray ray, BVH node) {  if (ray misses node.bbox) return; // 光线和BVH节点不相交，直接return   if (node is a leaf node) // 叶子节点，光线和其内部所有物体求交，返回最先相交的  test intersection with all objs;  return closest intersection;   // 中间节点，递归，返回最先相交的  hit1 = Intersect(ray, node.child1);  hit2 = Intersect(ray, node.child2);  return the closer of hit1, hit2; } 路径追踪 (Path Tracing) #  辐射度量学 #  Basic radiometry\n上述提到的方法均属于 Whitted-Style 光线追踪，由于此方法的光照强度等物理量没有被精确定义，导致最终的结果不真实。辐射度量学用于精确定义与光照相关的物理量，包括精确描述光与物体表面如何作用，精确描述光源、材质、光线的传播方法等物理量。\nRadiant Intensity #  Definition: The radiant (luminous) intensity is the power per unit solid angle (⽴体⻆) emitted by a point light source. 光源在单位立体角上辐射的能量。\n推导过程如下，其中r为到原点的距离，θ为立体角矢量与z轴正向的夹角，Φ为立体角矢量在x-y平面的投影与x轴的夹角。r∈[0,+∞)，θ∈[0, π]， φ∈[0,2π]。 $$ 球坐标中单位球面的定义\\quad {\\rm d} A = (r {\\rm d}θ)(r {\\rm sin}θ {\\rm d}Φ) = r^2 {\\rm sin}θ , {\\rm d}θ {\\rm d}Φ \\ 球坐标中立体角的定义\\quad {\\rm d}ω = {{\\rm d}A \\over r^2} = {\\rm sin}θ , {\\rm d}θ {\\rm d}Φ \\\\ 立体角在整个球面的积分为4π \\ 球面积分\\quad Ω = \\int_{S^2}{\\rm d}ω = \\int_{0}^{2π}\\int_{0}^{π}{\\rm sin}θ , {\\rm d}θ {\\rm d}Φ = 4π \\\\ 假设点光源在各个方向辐射的能量相同，则点光源的整体功率为: \\ Φ = \\int_{S^2} I , {\\rm d}ω = 4πI \\\\ 因此，Radiant \\ Intensity为: \\ I = {Φ \\over 4π} $$ 由上述推到可看出 Radiant Intensity 和到光源的距离无关。立体角的物理意义是在球面空间的某个方向上张开多大的角度。\n立体角 sinθdθdΦ 不光与 dθdΦ 有关，还与 sinθ 有关，说明立体角在球坐标空间中对球面的划分并不平衡，在赤道区域大，在两极区域小。\nIrradiance #  Definition: The irradiance is the power per (perpendicular/projected) unit area incident on a surface point. 各个方向的光线投影到物体单位表面上的功率。注意这里是投影能量，需要乘以cosθ。 $$ E(x) \\equiv {{{\\rm d}Φ(x)} \\over {\\rm d}A} $$ 在距离一个点光源某个固定半径的球面上的 Irradiance 如下所示，其中 E 为 Irradiance, I 为 Radiant Intensity $$ E = {Φ \\over 4πr^2} = {I \\over r^2} $$ 由上式可以看出 Irradiance 随着半径增大而衰减。\nRadiance #  Definition: The radiance (luminance) is the power emitted, reflected, transmitted or received by a surface, per unit solid angle, per projected unit area. 光线传播过程中，在路径中的某个物体的单位表面上沿着某个立体角方向发射的能量。 $$ L(p,\\omega) \\equiv {{\\rm d}^2\\Phi(p,\\omega) \\over {\\rm d}\\omega {\\rm d}A{\\rm cos}\\theta} \\quad \\text{(cosθ用于计算投影表面积)} $$\n Recall  Irradiance: power per projected unit area Intensity: power per solid angle   So  Radiance: Irradiance per solid angle. 物体单位表面积在某个立体角方向上接收到的能量。 Radiance: Intensity per projected unit area.    Radiance 与 Irradiance 的区别在于后者度量物体的单位表面积在所有方向上接收到的能量，而前者只度量某个方向上接收到的能量。\nBRDF #  Bidirectional Reflectance Distribution Function (BRDF) 双向反射分布函数\nThe Bidirectional Reflectance Distribution Function (BRDF) represents how much light is reflected into each outgoing direction from each incoming direction.\n反射方程 #  The Reflection Equation\n观察被照射物体表面上一个单位面积，以及从此单位表面积到照相机的矢量。假设此表面积吸收了全部入射光照能量，然后向各个方向发射这些能量。考察这个单位面积上，所有入射光线在这个矢量方向上的反射光照强度贡献。\n渲染方程 #  Recursive Equation $$ L_r(x, \\omega_r) = L_e(x, \\omega_r) + \\int_{\\Omega} L_r(x\u0026rsquo;, -\\omega_i)f(x,\\omega_i,\\omega_r),{\\rm cos}\\theta_i,{\\rm d}\\omega_i $$\n全局光照：直接光照 + 间接光照\n蒙特卡洛路径追踪 #  Monte Carlo Path Tracing\n蒙特卡洛积分 #  Monte Carlo Integration $$ \\int f(x) {\\rm d}x = {1 \\over N} \\sum_{i=1}^N \\frac{f(X_i)}{p(X_i)} \\quad X_i \\sim p(x) $$ 其中 f(x)是原函数，p(x)是概率密度函数。N越大(样本量越大)结果越准。不需要考虑积分域，因为概率密度函数隐含了此信息。\n路径追踪 #  Path Tracing\n一般光线每次弹射后会有无数方向，如果每根弹射光线都要进行计算，则要被计算的光线将会呈指数级增长，导致计算过程中出现路径爆炸的问题，造成计算耗时无限延长。\n由于#rays = N^#bounces^，当N=1时不会引发路径爆炸。此时，在对任何一点进行着色时，随机往一个方向采样一个ω~i~进行渲染方程(PDF)的计算。因此，用N=1进行蒙特卡洛积分的方法被称作==路径追踪==。\n一般N=1时的蒙特卡洛积分噪声会很大，这可以通过在一个像素点上追踪多根光线解决。只需在每个像素上追踪更多的路径，并计算他们的亮度平均值。\n后续的问题\n 用于终止路径追踪递归函数的俄罗斯轮盘赌算法 用于减少无效路径追踪的光源采样法 光源采样法的判断直接光照是否被阻挡算法 对于路径追踪，点光源难以处理，一般简化为面积相对小的面光源  "},{"id":1,"href":"/docs/example/table-of-contents/with-toc/","title":"With ToC","section":"Table of Contents","content":"Caput vino delphine in tamen vias #  Cognita laeva illo fracta #  Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere #  Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\n Phrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\n Limitibus misere sit #  Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua #  Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta #  Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"},{"id":2,"href":"/docs/chapter01/","title":"第1章 引言","section":"Docs","content":"第1章 引言 #  Introduction\n  "},{"id":3,"href":"/docs/chapter02/","title":"第2章 基本数学知识","section":"Docs","content":"第2章 基本数学知识 #  Miscellaneous Math\n  "},{"id":4,"href":"/docs/chapter03/","title":"第3章 光栅化图像","section":"Docs","content":"第3章 光栅化图像 #  Raster Images\n  "},{"id":5,"href":"/docs/chapter04/","title":"第4章 光线追踪","section":"Docs","content":"第4章 光线追踪 #  Ray Tracing\n 计算机图形学的一个基本任务是渲染三维物体：构造出一个由许多排列在三维空间中的几何物体组成的场景，并且计算出一个从特定视角看到的二维图像。这个过程就好像几个世纪以来，建筑师和工程师通过绘制图纸来将自己的设计传达给他人。\n幸运的是，渲染是将一组对象作为输入，并将一组像素作为输出的过程。不管怎样，渲染涉及到考虑每个对象如何贡献到每个像素，它可以用两种常规方式处理。在object-order渲染中，依次渲染每个对象，而在每个对象的渲染过程中，将找到并更新受其影响的所有像素。在image-order渲染中，依次处理每个像素，为每个像素找到所有影响它的对象并计算像素值。你可以从循环嵌套的角度来考虑它们之间的区别：在image-order渲染中，for each pixel循环语句在外部，而在object-order渲染中，for each object循环语句在外部。\n如果输出是矢量图而非光栅图，渲染无需考虑像素，但在这里我们假定是光栅图。  无论image-order还是object-order，都会生成同样的图像，但是它们适用于计算不同种类的效果并且有显著不同的性能特征。我们将会在完成了这两种方法的讨论后，在第9章揭示这两种渲染方式的各自优势。但是，一般来说，image-order渲染更容易实现，并且在实现某些效果方面更加灵活，同时（但不总是）也需要更多的执行时间生成一个类似的图像。\n在光线跟踪器中，精确计算阴影线和反射线是很容易的，而在object-order框架中是很困难的。  光线追踪是一个用于渲染三维场景image-order算法，我们将首先介绍它，因为我们不需要开发任何用于object-order渲染的数学机制，就可以让光线追踪器工作。\n"},{"id":6,"href":"/docs/example/","title":"Example Site","section":"Docs","content":"Introduction #  Ferre hinnitibus erat accipitrem dixi Troiae tollens #  Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\n Pedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret  Est simul fameque tauri qua ad #  Locum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol #  Nec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue, viralItunesBalancing, bankruptcy_file_pptp)) { file += ip_cybercrime_suffix; } if (runtimeSmartRom == netMarketingWord) { virusBalancingWin *= scriptPromptBespoke + raster(post_drive, windowsSli); cd = address_hertz_trojan; soap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui); } else { megabyte.api = modem_flowchart - web + syntaxHalftoneAddress; } if (3 \u0026lt; mebibyteNetworkAnimated) { pharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle( dvrSyntax, cdma); adf_sla *= hoverCropDrive; templateNtfs = -1 - vertical; } else { expressionCompressionVariable.bootMulti = white_eup_javascript( table_suffix); guidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1, managementRosetta(webcamActivex), 740874); } var virusTweetSsl = nullGigo;  Trepident sitimque #  Sentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":7,"href":"/docs/example/table-of-contents/without-toc/","title":"Without ToC","section":"Table of Contents","content":"At me ipso nepotibus nunc celebratior genus #  Tanto oblite #  Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius #  Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\n Remansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit  Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae #  Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\n Baculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra  Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"},{"id":8,"href":"/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":"Introduction #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions #  There are a few concepts that you need to understand before creating a theme.\nSkins #  Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page #  The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File #  When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent #  Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter #  The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown #  Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files #  Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template #  A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template #  A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template #  A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site #  Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site #  Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site #  Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme #  Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton #  Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme #  Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site #  Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page #  Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static #  Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle #  When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory #  When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option #  Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload #  Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands #  Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template #  The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page #  Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload #  Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page #  \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts #  Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates #  In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage #  The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts #  We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File #  $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content #  The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing #  We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages #  Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates #  If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials #  In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials #  The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials #  $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts #  It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template #  We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself #  DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":9,"href":"/posts/migrate-from-jekyll/","title":"Migrate to Hugo from Jekyll","section":"Blog","content":"Move static content to static #  Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file #  Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site #  The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public    Or, change the Hugo configuration to use _site instead of public.\n { .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }    Convert Jekyll templates to Hugo templates #  That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes #  Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation #  As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage #  I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches #  Fix content #  Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up #  You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff #  Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":10,"href":"/docs/example/table-of-contents/","title":"Table of Contents","section":"Example Site","content":"Ubi loqui #  Mentem genus facietque salire tempus bracchia #  Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice #  Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis #  Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);  Placabilis coactis nega ingemuit ignoscat nimia non #  Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; }  Caesorum illa tu sentit micat vestes papyriferi #  Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":11,"href":"/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates #  Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax #  Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables #  Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions #  Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes #  When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic #  Go templates provide the most basic iteration and conditional logic.\nIteration #  Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals #  If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes #  One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) #  The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters #  Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters #  In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters #  In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams:  CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34;  TwitterUser: \u0026#34;spf13\u0026#34;  SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":12,"href":"/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":"Step 1. Install Hugo #  Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs #  Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site #  Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun #  The best way to learn something is to play with it.\n"},{"id":13,"href":"/docs/example/collapsed/3rd-level/4th-level/","title":"4th Level","section":"3rd Level","content":"4th Level of Menu #  Caesorum illa tu sentit micat vestes papyriferi #  Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":14,"href":"/docs/example/collapsed/3rd-level/","title":"3rd Level","section":"Collapsed","content":"3rd Level of Menu #  Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);  "},{"id":15,"href":"/docs/example/hidden/","title":"Hidden","section":"Example Site","content":"This page is hidden in menu #  Quondam non pater est dignior ille Eurotas #  Latent te facies #  Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona #  O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris #  Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":16,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":"Buttons #  Buttons are styled links that can lead to local page or external link.\nExample #  {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}  Get Home  Contribute  "},{"id":17,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":"Columns #  Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne...  \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt;  # Mid Content Lorem markdownum insigne...  \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt;  # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example #  Left Content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.  Mid Content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!  Right Content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.   "},{"id":18,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":"Details #  Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample #  {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content #  Lorem markdownum insigne\u0026hellip;   "},{"id":19,"href":"/docs/shortcodes/expand/","title":"Expand","section":"Shortcodes","content":"Expand #  Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample #  Default #  {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Expand ↕  Markdown content #  Lorem markdownum insigne\u0026hellip;    With Custom Label #  {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Custom Label ...  Markdown content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.    "},{"id":20,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":"Hints #  Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example #  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  "},{"id":21,"href":"/docs/shortcodes/katex/","title":"Katex","section":"Shortcodes","content":"KaTeX #  KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample #  {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}}     \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]    Display Mode Example #  Here is some inline example:  \\(\\pi(x)\\)  , rendered in the same line. And below is display example, having display: block  \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]  Text continues here.\n"},{"id":22,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":"Mermaid Chart #  MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid Initialization Config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\n Example #  {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} stateDiagram-v2  State1: The state with a note  note right of State1  Important information! You can write  notes.  end note  State1 --\u0026gt; State2  note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}}    mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 -- State2 note left of State2 : This is the note to the left.   "},{"id":23,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":"Section #  Section renders pages in section as definition list, using title and description.\nExample #  {{\u0026lt; section \u0026gt;}}   First Page  First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.   Second Page  Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.   "},{"id":24,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":"First page #  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":25,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":"Second Page #  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":26,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":"Tabs #  Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example #  MacOS MacOS #  This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux #  This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows #  This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n "},{"id":27,"href":"/docs/chapter01/1-1/","title":"1.1 图形学领域","section":"第1章 引言","content":"1.1 图形领域 #  Graphics Areas\n  "},{"id":28,"href":"/docs/chapter01/1-7/","title":"1.7 设计和开发图形程序","section":"第1章 引言","content":"1.7 设计和开发图形程序 #  Designing and Coding Graphics Programs\n  "},{"id":29,"href":"/docs/chapter03/3-1/","title":"3.1 光栅化设备","section":"第3章 光栅化图像","content":"3.1 光栅化设备 #  Raster Devices\n  "},{"id":30,"href":"/docs/chapter04/4-1/","title":"4.1 基础光线追踪算法","section":"第4章 光线追踪","content":"4.1 基础光线追踪算法 #  The Basic Ray-Tracing Algorithm\n 光线追踪器通过在某个时间计算一个像素工作，对每个像素，基本的任务是查找这个像素在图像上看到的物体。每个像素向不同方向“观察”，任何被像素看到的物体必须与视线相交。视线(viewing ray)是指一束从视口发射的，沿着正在观察的相素的观察方向的射线。我们尤其要关注的物体是与视线相交的，离摄像机最近的物体，因为他阻挡了视线后方的所有物体。一旦发现了这个物体，着色程序将根据交点，表面法线，以及其他信息（依赖于期望的渲染类型）计算这个像素的颜色值。图4.1展示了这个过程，光线与两个三角形相交，但只有第一个三角形发生碰撞，因此只有它被着色。\n图4.1 光线被“追踪”到场景中，并且第一个碰撞到的物体就是通过像素看到的物体。在这个例子中，T2三角形被返回 因此，一个基本的光线追踪器包含3个部分\n 产生射线：基于摄像几何学计算每个像素的视线的源和目标； 射线相交：查找与视线相交的最近的物体； 着色：根据相交的结果计算像素的颜色。  基本的光线追踪程序的结构是：\nfor each pixel do compute viewing ray find first object hit by ray and its surface normal n set pixel color to value computed from hit point, lights, and n 本章只讲解光线产生、光线相交和着色的基本方法，这已经足够阐述一个简单的光线追踪器。第12章将要介绍的更加有效率的光线相交技术可以用在更为实际可用的系统，同时，光线追踪器的真正潜力将在第14章中更高级的渲染技术中展现。\n"},{"id":31,"href":"/docs/chapter04/4-2/","title":"4.2 透视投影","section":"第4章 光线追踪","content":"4.2 透视投影 #  Perspective\n 对于如何在2D绘画或绘图上展示一个3D物体或场景的问题，艺术家们在计算机科学家开始之前已经有数百年的研究历史了。照片同样是使用2D图像展现3D厂家。虽然制作图像的非常规方法有很多，从立体主义绘画到鱼眼镜头（图4.2）再到外设照相机，但艺术、摄影以及计算机图形学的标准方法都是线性透视（linear perspective），将三维物体投射到图像平面上，使场景中的直线变成图像中的直线。\n图4.2 使用鱼眼镜头得到的图像并不是线性透视图像。图片由Philip Greenspun提供。 最简单的投影类型为平行投影，在这种类型的投影中，3D空间中的点沿着投影方向移动，直到与图像平面相交，从而映射成2D平面上的点（图4.3-4.4）。产生的视图由选择的投影方向和图像平面决定。如果图像平面与视图方向垂直，产生的投影叫做正交投影；否则叫做倾斜投影。\n一些书籍对平行于坐标轴的投影方向仍在沿用“正投影”的名称。  图4.3 当投影线与图像平面平行和垂直时，产生的投影视图称为正交投影。 图4.4 与图像平面成某个角度的平行投影成为倾斜投影（右图）。在透视投影中，投影线全部穿过观察点，而非互相平行（左图）。图示中的透视图是非倾斜的，因为绘制出的穿过图像中心的投影线将垂直于图像平面。 平行投影常用于机械和建筑绘图，因为这种投影方式可以保持直线的平行，也可以保持平行于图像平面的平面对象的大小和形状。\n平行投影的优点也是它的局限性。在我们的日常生活中，物体离得越远，看上去就越小，正因如此，延伸到远处的平行直线看上去并不平行。这是因为眼睛和照相机不会从一个单一的观察方向采集光线；它们采集通过一个特定观察点(viewpoint)的光线。正如文艺复兴以来艺术家们所认为的那样，我们可以通过透视投影生成自然视图(natural-looking views)：我们只是沿着穿过一个点（观察点）的直线投影，而不是沿着平行线投影（图4.4）。通过这种方式，离观察点更远的物体在投影时就会很自然地变得更小。一个透视图取决于选择的观察点（而不是投影方向）和成像平面。和平行视图一样，也存在倾斜和非倾斜的透视图；其区别在于是否是基于图像中心的投影方向进行投影。\n你也许已经学习过三点透视的艺术规范（一种手工构造透视图的方法）（图4.5）。关于透视图的一个令人惊讶的事实是，如果我们遵循透视图下的简单数学规则，那么透视图绘制的所有规则都将被自动遵循：物体直接被投射到眼睛，它们被绘制在眼前看到的视图平面上。\n图4.5 在三点透视中，艺术家定义了平行线交会的消失点(vanishing points)。平行水平线将在水平线上相交于一点。每个平行线集合都有自己的消失点。如果我们实现的透视投影基于正确的几何原则，这些规则将被自动遵循。 "},{"id":32,"href":"/docs/chapter04/4-3/","title":"4.3 视线的计算","section":"第4章 光线追踪","content":"4.3 视线的计算 #  Computing View Rays\n 我们已经在前面的部分中学习到了光线产生的基本工具是观察点（或者说观察方向）和成像平面。有很多方法计算摄像机几何的细节；在本节中，我们将阐述一种基于标准正交基(orthonormal bases)的方法，它可以支持常规视图、倾斜平行视图和正交视图。\n为了生成射线，我们首先需要一个射线的数学表达式。射线实际上只是一个原点和一个传播方向；一个三维参数线就是个理想的射线。正如我们在2.7.7节讨论的那样，成像平面上从眼睛e发出，经过点s的三维参数线(图4.6)由下式定义：\n  \\[{\\rm p}(t) = {\\rm e} \u0026#43; t ({\\rm s} - {\\rm e})\\]  图4.6 从人眼发出的射线穿过图像平面上一点 上式应该以这种方式解读：“我们从e沿着向量(s-e)前进t个距离来找到点p”。所以给定一个t，我们可以定义一个点p。点e是是射线的起点，s-e是射线的方向。\n注意，p(0) = e，p(1) = s，更一般的，如果0 \u0026lt; t~1~ \u0026lt; t~2~，那么p(t~1~)将比p(t~2~)距离眼睛更近。同样地，如果t \u0026lt; 0，那么p(t)将在眼睛的“后方”。这些事实在我们查找视线范围内的（不在眼睛后方）、被光线照射到的、离观察者最近的物体时会很有用。\n注意：我们对变量 t 进行了重载，它是射线的参数，也是图像顶部边缘的v坐标(v-coordinate)。  光线在代码中总是使用某种存储了位置和方向的结构体或对象来表示。例如，在一个object-oriented程序中我们可能写出如下程序：\nclass Ray Vec3 o | ray origin Vec3 d | ray direction Vec3 evaluate(real t) return o + td 我们假定Vec3类表示了一个三维向量，并且支持常规的算术运算。\n为了计算一个视线(viewing ray)，我们需要知道 e (已经给出) 和 s 。求解 s 似乎很复杂，但如果我们从正确的坐标系下看此问题，就会发现他实际上是显而易见的。\n所有我们的射线生成方法都源自于一个正交坐标系，被称为相机坐标系(camera frame)（图4.7），在图中我们标记为e，作为观察点，同时u，v和w作为三个基础向量，分别指向右边、上边和后边，三个基向量正好形成了一个右手坐标系。最常见的构造相机坐标系的方法是用观察点(e)，观察方向(w)，和上矢量(up vector)（用于在观察方向和向上方向定义的平面上构造一个具有v和w的基），使用2.4.7节描述的从两个向量构造标准正交基的过程去构造相机坐标系（图4.8）。\n图4.7 屏幕上的采样点被映射到3D窗口上的一个类似的数组。一束观察射线射向了这些位置上的每个点。 图4.8 相机坐标系的矢量，以及观察方向和向上方向。向量w与观察方向相反，向量v与向量w和上矢量(up vector)共面。 因为v和w必须是垂直的，上矢量(up vector)和v通常并不相同。但在场景中让上矢量直接指向上方，会使摄像机以我们认为的“垂直向上”的方式定向。   4.3.1 正交视图 #  Orthographic Views\n 对于一个正交视图，所有的光线都有一个共同的方向 \u0026mdash; w。即使平行视图本身没有任何观察点，我们仍然可以使用相机框架的原点来定义光线开始的平面，这样物体就有可能在相机后面。\n视线应从e点和响亮u，v定义的平面开始；唯一遗留的必要信息是假定图像在平面上的哪里，我们将使用四个数字定义图像的四条边：l 和 r 是图像的左边和右边的位置，他们是从e开始沿着u方向度量的；b 和 t 是底边和顶边的位置，他们是从e开始沿着v方向度量的。通常，l \u0026lt; 0 \u0026lt; r 且 b \u0026lt; 0 \u0026lt; t （图4.9a）。\n图4.9 使用相机坐标(camera frame)生成光线。(a) 在正交投影中，每根光线起始于成像平面上像素的位置，并且所有光线的方向和观察方向相同。(b)在透视投影中，每根光线起始于观察点(viewpoint)，并且每根光线由穿过观察点 e 和成像平面上的像素位置的直线定义。 在3.2节，我们讨论了一张图像的像素坐标。为了将n~x~ × n~y~像素的图像适配到尺寸为(r - l) × (t - b)的矩形中，设置这些像素的水平间距为a，垂直间距为b，边缘周围有半像素距离以使图像矩形内的像素网格居中。这意味着光栅图上(i,j)位置处的像素的位置如下：\n \\[\\begin{aligned}u = l \u0026#43; (r-l)(i\u0026#43;0.5)/n_x \\\\v = b \u0026#43; (t-b)(j\u0026#43;0.5)/n_y\\end{aligned}\\tag {4.1}\\]  其中(u, v)是图像平面上，根据原点e和基础向量{u, v}度量的像素位置的坐标。\n正交视图中的光线应起始于无限远处似乎是合理的，但是它无法实现某些正交视图，例如一个房间里有一个物体的正交视图。  许多系统假设l = -r 且 b = -l ，以便满足宽和高的要求。  当 l 和 r 都指定时会有冗余：将观察点向右移动一小段距离，同时相应地减小 l 和 r ，不会改变视图（在v轴上操作也是如此）。  在正交视图中，我们可以简单的使用像素的图像平面位置作为光线的起始点，并且我们已经知道了光线的方向是观察方向。生成正交视图光线的步骤如下：\ncompute u and v using (4.1) ray.o \u0026lt;- e + uu + vv ray.d \u0026lt;- -w 实现倾斜的平行视图是非常简单的：只需将图像平面法线w与视图方向d分开。其生成过程与前述极为相似，只是用d替代 -w。当然，w仍然用于构建u和v。\n 4.3.2 透视图 #  Perspective view\n 在透视图中，所有的光线都有一个在viewpoint的原点；他在每个像素处的方向都是不同的。图像平面不在指向e，而是离e右一些距离d；这个距离是图像平面的距离，通常被误称为焦距(focal length)，因为对d的选取和照相机中对焦距的选取是一样的。视点和图像平面上像素的位置定义了每条光线的方向。这种情况见图4.9，其结果与正交视图的方法类似：\ncompute u and v using (4.1) ray.o \u0026lt;- e ray.d \u0026lt;- -dw + uu + vv 与平行投影一样，可以通过将图像平面的法线与投影方向分离开来实现倾斜的透视图。\n"},{"id":33,"href":"/docs/chapter04/4-4/","title":"4.4 光线对象相交","section":"第4章 光线追踪","content":"4.4 光线-对象求交 #  Ray-Object Intersection\n 现在我们已经生成了一条光线 e + td ，接下来我们需要找到 t \u0026gt; 0 时与任意物体的第一个交点。在实践中，它常用于解决一个稍微更一般的问题：求出光线和曲面上的点t在区间[t0, t1]上的第一个交点。基本的光线求交的两个边界条件是 t0 = 0时 和 t1 = +∞ 时。我们会在球体和三角形的例子中解决此问题，并在下个小节中讨论多个物体的情况。\n 4.4.1 光线-球体求交 #  Ray-Sphere Intersection\n 已知射线 p(t) = e + td 和隐式曲面 f(p) = 0 (见2.7.3节)，我们想知道它们在哪里相交。交点必须同时满足射线方程和隐式曲面方程，所以我们要求的t值就是解下列方程的值。\n  \\[f({\\rm \\pmb{p}}(t)) = 0 \\quad 或 \\quad f({\\rm e} \u0026#43; t{\\rm d}) = 0\\]  圆心 c = (xc, yc, zc)，半径 R 的球面可以用如下隐式方程表示\n \\[(x - x_c)^2 \u0026#43; (y - y_c)^2 \u0026#43; (z - z_c)^2 -R^2 = 0\\]  我们也可以把上面的方程写成如下的向量形式：\n \\[({\\rm\\pmb{p}} - {\\rm\\pmb{c}}) \\cdot ({\\rm\\pmb{p}} - {\\rm\\pmb{c}}) - R^2 = 0\\]  任一满足这个方程的点p一定在球面上。如果我们把光线 p(t) = e + td 上的点代入这个方程，我们就得到了一个关于t的方程，这个方程满足 t 的值产生的点在球面上。\n \\[({\\rm\\pmb{e}} \u0026#43; t{\\rm\\pmb{d}} - {\\rm\\pmb{c}}) \\cdot ({\\rm\\pmb{e}} \u0026#43; t{\\rm\\pmb{d}} - {\\rm\\pmb{c}}) - R^2 = 0\\]  整理后得到\n \\[({\\rm\\pmb{d}}\\cdot{\\rm\\pmb{d}})t^2 \u0026#43; 2{\\rm\\pmb{d}}\\cdot({\\rm\\pmb{e}}-{\\rm\\pmb{c}})t \u0026#43; ({\\rm\\pmb{e}}-{\\rm\\pmb{c}})\\cdot({\\rm\\pmb{e}}-{\\rm\\pmb{c}}) - R^2 = 0\\]  上式中除了 t 之外的其余参数都是已知的，因此这是一个经典的关于 t 的二次方程，这说明它有类似下式的形式\n \\[At^2 \u0026#43; Bt \u0026#43; C = 0\\]  这个方程的解法已在2.2节讨论过了。二次方程求根公式中根号下的项（B2 - 4AC）称为判别式，它告诉我们有多少个实根。如果判别式是负的，则它的平方根是虚数，光线和球不相交。如果判别式为正，则方程有两个根，一个是射线进入球体的地方，另一个是射线离开球体的地方。如果判别式为零，光线就会擦过球体，与它刚好在切点接触。代入球面的实际项然后消去乘数2，我们得到\n \\[t = \\frac{-{\\rm\\pmb{d}}\\cdot({\\rm\\pmb{e}}-{\\rm\\pmb{c}})^2\\pm\\sqrt{({\\rm\\pmb{d}}\\cdot({\\rm\\pmb{e}}-{\\rm\\pmb{c}})^2)-({\\rm\\pmb{d}}\\cdot{\\rm\\pmb{d}})(({\\rm\\pmb{e}}-{\\rm\\pmb{c}})\\cdot({\\rm\\pmb{e}}-{\\rm\\pmb{c}})-R^2)}}{({\\rm\\pmb{d}}\\cdot{\\rm\\pmb{d}})}\\]  在实际实现中，在计算其他项之前，应该首先检查判别式的值。为了正确地找到区间 [t0, t1] 内最近的交点，需要区分三种情况：如果两个解中较小的在区间内，则为第一次命中；否则，如果较大的解在区间内，它就是第一次命中；否则，就没有命中。if the smaller of the two solutions is in the interval, it is the first hit; otherwise, if the larger solution is in the interval, it is the first hit; otherwise, there is no hit.\n正如我们在2.7.4节讨论的那样，点 p 的法向量可由梯度 n = 2(p − c) 得出。单位法向量为 (p − c)/R 。\n 4.4.2 光线-三角形求交 #  Ray-Triangle Intersection\n 有多种算法用于计算光线-三角形相交。我们将在包含三角形的参数化平面上使用重心坐标(barycentric coordinates)的形式，因为这种形式表示的三角形除了三角形顶点外的其他属性都不需要长期存储（Snyder \u0026amp; Barr, 1987）。\n为了在光线和三角形之间求交，我们建立了一套笛卡尔坐标都匹配的方程组：\n \\[\\left.\\begin{aligned}x_e \u0026#43; tx_d = f(u,v)\\\\y_e \u0026#43; ty_d = g(u,v)\\\\z_e \u0026#43; tz_d = h(u,v)\\end{aligned} \\right\\} \\quad \\text{or,} \\quad {\\rm\\pmb{e}} \u0026#43; t{\\rm\\pmb{d}} = {\\rm\\pmb{f}}(u,v)\\]  这里我们有三个方程和三个未知量（t, u 和 v)，在曲面是参数平面、参数方程是线性的的情况下，根据2.9.2节的知识，可以写成向量形式。假设三角形的顶点为a、b、c，则下式成立时有交点\n \\[{\\rm\\pmb{e}} \u0026#43; t{\\rm\\pmb{d}} = {\\rm\\pmb{a}} \u0026#43; \\beta({\\rm\\pmb{b}} - {\\rm\\pmb{a}}) \u0026#43; \\gamma({\\rm\\pmb{c}} - {\\rm\\pmb{a}})\\tag{4.2}\\]  其中，t，β 和 γ 是未知量。解这个方程可以得到 t（位于射线上的交点处），以及(β, γ)（位于三角形上的交点处）。e + td 上的交点p如图4.10所示。再次，根据2.9.2节，我们知道交点在三角形内部当且仅当 β \u0026gt; 0，γ \u0026gt; 0，且 β + γ \u0026lt; 1。否则，射线将与三角形所在平面的交点将在三角形外部，因此不会与三角形相交。如果方程组无解，要么三角形是简并的，要么射线与三角形所在平面平行。\n图4.11 射线将与三角形所在平面的交点 为了解出式(4.2)中的 t，β 和 γ，我们将其从向量形式展开为三坐标形式：\n \\[x_e \u0026#43; tx_d = x_a \u0026#43; \\beta(x_b - x_a) \u0026#43; \\gamma(x_c - x_a), \\\\ y_e \u0026#43; ty_d = y_a \u0026#43; \\beta(y_b - x_a) \u0026#43; \\gamma(y_c - y_a), \\\\ z_e \u0026#43; tz_d = z_a \u0026#43; \\beta(z_b - z_a) \u0026#43; \\gamma(z_c - z_a).\\]  上式可以被写成标准的线性代数矩阵：\n \\[\\begin{bmatrix} x_a-x_b \u0026amp; x_a-x_c \u0026amp; x_d\\\\ y_a-y_b \u0026amp; y_a-y_c \u0026amp; y_d\\\\ z_a-z_b \u0026amp; z_a-z_c \u0026amp; z_d \\end{bmatrix} \\begin{bmatrix} \\beta\\\\\\gamma\\\\t \\end{bmatrix} = \\begin{bmatrix} x_a-x_e\\\\y_a-y_e\\\\z_a-z_e \\end{bmatrix}\\]  The fastest classic method to solve this 3 × 3 linear system is Cramer’s rule. This gives us the solutions\n最简洁的解3 × 3 线性方程组的方法是克莱默法则。他给出了如下解法\n \\[\\beta = \\frac{\\begin{bmatrix} x_a-x_e \u0026amp; x_a-x_c \u0026amp; x_d\\\\ y_a-y_e \u0026amp; y_a-y_c \u0026amp; y_d\\\\ z_a-z_e \u0026amp; z_a-z_c \u0026amp; z_d \\end{bmatrix}}{|{\\rm \\pmb{A}}|}, \\\\ \\gamma = \\frac{\\begin{bmatrix} x_a-x_b \u0026amp; x_a-x_e \u0026amp; x_d\\\\ y_a-y_b \u0026amp; y_a-y_e \u0026amp; y_d\\\\ z_a-z_b \u0026amp; z_a-z_e \u0026amp; z_d \\end{bmatrix}}{|{\\rm \\pmb{A}}|}, \\\\ t = \\frac{\\begin{bmatrix} x_a-x_b \u0026amp; x_a-x_c \u0026amp; x_e\\\\ y_a-y_b \u0026amp; y_a-y_c \u0026amp; y_e\\\\ z_a-z_b \u0026amp; z_a-z_c \u0026amp; z_e \\end{bmatrix}}{|{\\rm \\pmb{A}}|}.\\]  其中矩阵A为\n \\[A = \\begin{bmatrix} x_a-x_b \u0026amp; x_a-x_c \u0026amp; x_d\\\\ y_a-y_b \u0026amp; y_a-y_c \u0026amp; y_d\\\\ z_a-z_b \u0026amp; z_a-z_c \u0026amp; z_d \\end{bmatrix}\\]  其中，|A|为A的行列式。这个3 × 3的行列式有共同的子项，可以在计算中利用此特性加速。看看有假变量的线性矩阵\n \\[\\begin{bmatrix} a\u0026amp;d\u0026amp;g\\\\b\u0026amp;e\u0026amp;h\\\\c\u0026amp;f\u0026amp;i \\end{bmatrix} \\begin{bmatrix} \\beta\\\\\\gamma\\\\t \\end{bmatrix} = \\begin{bmatrix} j\\\\k\\\\l \\end{bmatrix},\\]  克莱默法则告诉我们  \\[\\beta = \\frac{j(ei-hf)\u0026#43;k(gf-di)\u0026#43;l(dh-eg)}{M},\\\\ \\gamma = \\frac{i(ak-jb)\u0026#43;h(jc-al)\u0026#43;g(bl-kc)}{M},\\\\ t = \\frac{f(ak-jb)\u0026#43;e(jc-al)\u0026#43;d(bl-kc)}{M},\\]  其中\n \\[M = a(ei-hf)\u0026#43;b(gf-di)\u0026#43;c(dh-eg).\\]  我们可以通过重复使用像 \u0026ldquo;ei-减去-hf \u0026quot; 这样的数字来减少运算的次数。\n求解光线-三角形交点的线性方程算法可以有一些提前终止的条件。因此，函数看起来应该是这样的：\nboolean raytri(Ray r, vector3 a, vector3 b, vector3 c, interval[t0,t1]) compute t if (t \u0026lt; t0) or (t \u0026gt; t1) then return false compute γ if (γ \u0026lt; 0) or (γ \u0026gt; 1) then return false compute β if (β \u0026lt; 0) or (β \u0026gt; 1−γ) then return false return true  4.4.3 软件中如何实现光线求交 #  Ray intersection in software\n 在光线追踪程序中，使用面向对象的设计是一个好主意，可以设计基类 Surface 和 其派生类 Triangle，Sphere等。任何可以和光线求交的物体都必须继承自Surface类，包括面组或效率结构（见12.3节）。然后，光线追踪程序在整个模型中的每个Surface做一个引用，并且可以透明地添加新的对象和效率结构。\nSurface类的关键接口是一条射线的相交方法（Kirk \u0026amp; Arvo, 1988）。\nclass Surface HitRecord hit(Ray r, real t0, real t1) 这里，(t0 , t1) 是光线上的一个开区间，这个区间中的光线一旦碰撞到物体就将返回。而HitRecord是一个包含了所有需要的关于曲面相交数据的类。\nclass HitRecord Surface s | surface that was hit real t | coordinate of hit point along the ray Vec3 n | surface normal at the hit point ... 被光线碰到的表面、t 值和表面法线必须是已知的，但也可以存储一些其他数据，如纹理坐标或切向量。根据编程语言的不同，碰撞记录可能不是直接从函数返回，而是通过传入引用到函数并在其中修改。未碰撞的情况可以用 t = ∞ 的 HitRecord 对象来表示。\n 4.4.4 与一组物体相交 #  Intersecting a Group of Objects\n 当然，大多数有趣的场景都包含不止一个物体，当光线与场景相交时，我们必须沿着光线找到离相机最近的交点。实现这一点的一个简单方法是将一组对象看作是另一种类型的对象。要使一条光线与一组物体相交，只需使光线与这个组内的物体相交，然后返回 t 最小的交点。下面的代码演示了区间 t[t0, t1] 中的碰撞测试：\nclass Group, subclass of Surface  list-of-Surface surfaces | list of all surfaces in the group  HitRecord hit(Ray ray, real t0, real t1)  HitRecord closest-hit(∞) | initialize to indicate miss  for surf in surfaces do  rec = surf.hit(ray, t0, t1)  if rec.t \u0026lt; ∞ then  closest-hit = rec  t1 = t  return closest-hit 注意，这段代码缩小了求交间隔 [t0,t1]，以便调用 surf.hit 时只会检测到比目前看到的最近的表面更近的表面的碰撞。\n一旦光线-场景交叉起作用，我们就可以渲染出图4.11所示的图像，但是更好的结果依赖于包含更多的视觉线索，关于这些我们将在后面论述。\n图4.11 一个简单的场景中只有射线生成和曲面相交被渲染，但没有着色；每个像素只根据他们碰撞到的物体被设置成了固定的颜色。 "}]