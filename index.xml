<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on 计算机图形学基础</title><link>https://sujingclg.github.io/</link><description>Recent content in Introduction on 计算机图形学基础</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://sujingclg.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>With ToC</title><link>https://sujingclg.github.io/docs/example/table-of-contents/with-toc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/example/table-of-contents/with-toc/</guid><description>Caput vino delphine in tamen vias # Cognita laeva illo fracta # Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.
Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere # Pectora et sine mulcere, coniuge dum tincta incurvae.</description></item><item><title>Without ToC</title><link>https://sujingclg.github.io/docs/example/table-of-contents/without-toc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/example/table-of-contents/without-toc/</guid><description>At me ipso nepotibus nunc celebratior genus # Tanto oblite # Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.
Quam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque.</description></item><item><title>光栅化</title><link>https://sujingclg.github.io/docs/notes/games101/rasterization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/notes/games101/rasterization/</guid><description>光栅化 # Rasterization
离散化三角形 # Triangles
What is a screen?
An array of pixels Size of the array: resolution A typical kind of raster display Raster == screen in German（屏幕的德语词汇）
Rasterize == drawing onto the screen Pixel (FYI, short for “picture element”)
For now: A pixel is a little square with uniform color Color is a mixture of (red, green, blue) 光栅化步骤 # 从变换空间[-1,1]^3^映射到到屏幕空间。首先忽略z方向，使用视口变换将xy空间映射到屏幕。</description></item><item><title>着色</title><link>https://sujingclg.github.io/docs/notes/games101/shading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/notes/games101/shading/</guid><description>着色 # Shading
定义：对不同的物体应用不同材质的过程。 着色具有局部性，即不考虑阴影。 Blinn-Phong 反射模型 # Blinn-Phong Reflectance Model
分解为漫反射、高光、环境光三项。
漫反射 - Diffuse # 只考虑光照强度和方向，不考虑观察方向。 $$ L_d = k_d \frac{I}{r^2}{\rm max}(0, \vec n \cdot \vec l) $$ 其中：
Ld : diffusely reflected light kd : diffuse coefficient (color) I/r2 : energy arrived at the shading point max(0, n · l) : energy received by the shading point 高光 - Specular Term # \[半程向量: h = {\rm bisector}(\vec v, \vec l) = \frac {\vec v &amp;#43; \vec l}{||\vec v &amp;#43; \vec l||} \\ L_s = k_s \frac{I}{r^2} {\rm max}(0, {\rm cos} \alpha)^p = k_s \frac{I}{r^2} {\rm max}(0, \vec n \cdot \vec h)^p\] 半程向量为入射光线与反射光线在观察点处的角平分线所在的向量。 当且仅当半程向量接近物体表面法线时，反射光线呈现高光态。 指数p值越大，越接近镜面，表面越光滑。 环境光 - Ambient # $$ L_a = k_a + I_a $$</description></item><item><title>光线追踪</title><link>https://sujingclg.github.io/docs/notes/games101/ray-tracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/notes/games101/ray-tracing/</guid><description>光线追踪 # Ray Tracing
本节的光线追踪方法属于 Whitted-Style 光线追踪。
导论 # 光线追踪 vs 光栅化 # 光线追踪和光栅化是两种不同的成像方式。之所以需要光线追踪，是因为光栅化在处理全局效果方面表现不好，尤其是光线弹射超过一次的场景。全局效果(Global effects)包括软阴影(Soft shadows)，光面反射(Glossy reflection)，间接光照(Indirect illumination)。
光栅化是一种很快的、但是很近似的渲染方法，因此图像质量较低。光栅化可以轻松做到实时渲染，实时渲染要求每秒超过30帧。
光线追踪的步骤 # 光线追踪的主要步骤是计算光线和物体求交，而其中最重要的是计算光线和三角形求交。光线和三角形片元求交，可以分解为两步：
光线和三角形片元所在平面求交； 判断交点是否在三角形片元内部。 光线追踪的代表算法 # Möller Trumbore Algorithm：一种快速判定光线和三角形片元是否相交的算法。 Whitted-Style Ray Tracing：一种光线追踪的实现方式，此外还有路径追踪。 包围盒 # Axis-Aligned Bounding Box
Axis-Aligned Bounding Box (AABB) (轴对⻬包围盒)：一种加速光线追踪的技术，其理论是假设空间中存在这样一种包围盒，其三个面和坐标系平行，将几何体完全包裹进来，如果光线不会和包围盒相交，则一定不会和其内部的几何体相交。此方法通过减少不必要的对三角形片元与光线的相交计算，大幅加速光线追踪的计算时间。
如何判断包围盒与光线是否相交？ # 光线只在进入包围盒所有的平面才算进入包围盒。光线只在离开任一包围盒的平面就算离开包围盒。 对每个平面对，计算 t~min~ 和 t~max~ ，可以为负值。 对包围盒而言，t~enter~ = max{t~min~}, t~exit~ = min{t~max~}。 从物理规律上看，必然 t~enter~ &amp;lt; t~exit~ ，说明光线会在包围盒内部经过了一段时间，但他们不一定相交。 如果 t~exit~ &amp;lt; 0，说明包围盒在光线的后面，他们不相交。 如果 t~exit~ &amp;gt;= 0 且 t~enter~ &amp;lt; 0，说明光源在包围盒内部，他们必然相交。 光线和包围盒有交点的充要条件是 t~enter~ &amp;lt; t~exit~ &amp;amp;&amp;amp; t~exit~ &amp;gt;= 0。 AABB加速光线追踪的过程 # 两个概念：均匀的格子(Uniform grids)，空间划分(Spatial partitions)。</description></item><item><title>路径追踪</title><link>https://sujingclg.github.io/docs/notes/games101/path-racing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/notes/games101/path-racing/</guid><description>路径追踪 # Path Tracing
\[\]
辐射度量学 # Basic radiometry
上述提到的方法均属于 Whitted-Style 光线追踪，由于此方法的光照强度等物理量没有被精确定义，导致最终的结果不真实。辐射度量学用于精确定义与光照相关的物理量，包括精确描述光与物体表面如何作用，精确描述光源、材质、光线的传播方法等物理量。
Radiant Intensity # Definition: The radiant (luminous) intensity is the power per unit solid angle (⽴体⻆) emitted by a point light source. 光源在单位立体角上辐射的能量。
推导过程如下，其中r为到原点的距离，θ为立体角矢量与z轴正向的夹角，Φ为立体角矢量在x-y平面的投影与x轴的夹角。r∈[0,+∞)，θ∈[0, π]， φ∈[0,2π]。
球坐标中单位球面的定义： $$ {\rm d} A = (r {\rm d}\theta)(r {\rm sin}\theta {\rm d}\Phi) = r^2 {\rm sin}\theta {\rm d}\theta {\rm d}\Phi $$ 球坐标中立体角的定义： $$ {\rm d}\omega = {{\rm d}A \over r^2} = {\rm sin}\theta {\rm d}\theta {\rm d}\Phi $$ 因为立体角在整个球面的积分为4π，则球面积分为 $$ \Omega = \int_{S^2}{\rm d}\omega = \int_{0}^{2\pi}\int_{0}^{\pi}{\rm sin}\theta {\rm d}\theta {\rm d}\Phi = 4\pi $$ 假设点光源在各个方向辐射的能量相同，则点光源的整体功率为 $$ \Phi = \int_{S^2} I {\rm d}\omega = 4\pi I $$ 因此，Radiant Intensity为 $$ I = \frac{\Phi}{4\pi} $$ 由上述推到可看出 Radiant Intensity 和到光源的距离无关。立体角的物理意义是在球面空间的某个方向上张开多大的角度。</description></item><item><title>Creating a New Theme</title><link>https://sujingclg.github.io/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://sujingclg.github.io/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://sujingclg.github.io/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://sujingclg.github.io/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://sujingclg.github.io/docs/example/collapsed/3rd-level/4th-level/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/example/collapsed/3rd-level/4th-level/</guid><description>4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.
Venasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto!</description></item><item><title/><link>https://sujingclg.github.io/docs/example/hidden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/example/hidden/</guid><description>This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.
Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem.</description></item><item><title/><link>https://sujingclg.github.io/docs/shortcodes/buttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/shortcodes/buttons/</guid><description>Buttons # Buttons are styled links that can lead to local page or external link.
Example # {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}} Get Home Contribute</description></item><item><title/><link>https://sujingclg.github.io/docs/shortcodes/columns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/shortcodes/columns/</guid><description>Columns # Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis!</description></item><item><title/><link>https://sujingclg.github.io/docs/shortcodes/details/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/shortcodes/details/</guid><description>Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.
Example # {{&amp;lt; details &amp;#34;Title&amp;#34; [open] &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} {{&amp;lt; details title=&amp;#34;Title&amp;#34; open=true &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} Title Markdown content # Lorem markdownum insigne&amp;hellip;</description></item><item><title/><link>https://sujingclg.github.io/docs/shortcodes/expand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/shortcodes/expand/</guid><description>Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example # Default # {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Expand ↕ Markdown content # Lorem markdownum insigne&amp;hellip; With Custom Label # {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne.</description></item><item><title/><link>https://sujingclg.github.io/docs/shortcodes/hints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/shortcodes/hints/</guid><description>Hints # Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example # Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content</description></item><item><title/><link>https://sujingclg.github.io/docs/shortcodes/katex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/shortcodes/katex/</guid><description>KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX
Example # {{&amp;lt; katex [display] [class=&amp;#34;text-center&amp;#34;] &amp;gt;}} f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi {{&amp;lt; /katex &amp;gt;}} \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Display Mode Example # Here is some inline example: \(\pi(x)\) , rendered in the same line. And below is display example, having display: block \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Text continues here.</description></item><item><title/><link>https://sujingclg.github.io/docs/shortcodes/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/shortcodes/mermaid/</guid><description>Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.
Override Mermaid Initialization Config
To override the initialization config for Mermaid, create a mermaid.json file in your assets folder!
Example # {{&amp;lt; mermaid [class=&amp;#34;text-center&amp;#34;]&amp;gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --&amp;gt; State2 note left of State2 : This is the note to the left.</description></item><item><title/><link>https://sujingclg.github.io/docs/shortcodes/section/first-page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/shortcodes/section/first-page/</guid><description>First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description></item><item><title/><link>https://sujingclg.github.io/docs/shortcodes/section/second-page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/shortcodes/section/second-page/</guid><description>Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description></item><item><title/><link>https://sujingclg.github.io/docs/shortcodes/tabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/shortcodes/tabs/</guid><description>Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example # MacOS MacOS # This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis!</description></item><item><title>1.1 图形学领域</title><link>https://sujingclg.github.io/docs/chapter01/1-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/chapter01/1-1/</guid><description>1.1 图形领域 # Graphics Areas
 </description></item><item><title>1.7 设计和开发图形程序</title><link>https://sujingclg.github.io/docs/chapter01/1-7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/chapter01/1-7/</guid><description>1.7 设计和开发图形程序 # Designing and Coding Graphics Programs
 </description></item><item><title>3.1 光栅化设备</title><link>https://sujingclg.github.io/docs/chapter03/3-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/chapter03/3-1/</guid><description>3.1 光栅化设备 # Raster Devices
 </description></item><item><title>4.1 基础光线追踪算法</title><link>https://sujingclg.github.io/docs/chapter04/4-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/chapter04/4-1/</guid><description>4.1 基础光线追踪算法 # The Basic Ray-Tracing Algorithm
光线追踪器通过在某个时间计算一个像素工作，对每个像素，基本的任务是查找这个像素在图像上看到的物体。每个像素向不同方向“观察”，任何被像素看到的物体必须与视线相交。视线(viewing ray)是指一束从视口发射的，沿着正在观察的相素的观察方向的射线。我们尤其要关注的物体是与视线相交的，离摄像机最近的物体，因为他阻挡了视线后方的所有物体。一旦发现了这个物体，着色程序将根据交点，表面法线，以及其他信息（依赖于期望的渲染类型）计算这个像素的颜色值。图4.1展示了这个过程，光线与两个三角形相交，但只有第一个三角形发生碰撞，因此只有它被着色。
图4.1 光线被“追踪”到场景中，并且第一个碰撞到的物体就是通过像素看到的物体。在这个例子中，T2三角形被返回 因此，一个基本的光线追踪器包含3个部分
产生射线：基于摄像几何学计算每个像素的视线的源和目标； 射线相交：查找与视线相交的最近的物体； 着色：根据相交的结果计算像素的颜色。 基本的光线追踪程序的结构是：
for each pixel do compute viewing ray find first object hit by ray and its surface normal n set pixel color to value computed from hit point, lights, and n 本章只讲解光线产生、光线相交和着色的基本方法，这已经足够阐述一个简单的光线追踪器。第12章将要介绍的更加有效率的光线相交技术可以用在更为实际可用的系统，同时，光线追踪器的真正潜力将在第14章中更高级的渲染技术中展现。</description></item><item><title>4.2 透视投影</title><link>https://sujingclg.github.io/docs/chapter04/4-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/chapter04/4-2/</guid><description>4.2 透视投影 # Perspective
对于如何在2D绘画或绘图上展示一个3D物体或场景的问题，艺术家们在计算机科学家开始之前已经有数百年的研究历史了。照片同样是使用2D图像展现3D厂家。虽然制作图像的非常规方法有很多，从立体主义绘画到鱼眼镜头（图4.2）再到外设照相机，但艺术、摄影以及计算机图形学的标准方法都是线性透视（linear perspective），将三维物体投射到图像平面上，使场景中的直线变成图像中的直线。
图4.2 使用鱼眼镜头得到的图像并不是线性透视图像。图片由Philip Greenspun提供。 最简单的投影类型为平行投影，在这种类型的投影中，3D空间中的点沿着投影方向移动，直到与图像平面相交，从而映射成2D平面上的点（图4.3-4.4）。产生的视图由选择的投影方向和图像平面决定。如果图像平面与视图方向垂直，产生的投影叫做正交投影；否则叫做倾斜投影。
一些书籍对平行于坐标轴的投影方向仍在沿用“正投影”的名称。 图4.3 当投影线与图像平面平行和垂直时，产生的投影视图称为正交投影。 图4.4 与图像平面成某个角度的平行投影成为倾斜投影（右图）。在透视投影中，投影线全部穿过观察点，而非互相平行（左图）。图示中的透视图是非倾斜的，因为绘制出的穿过图像中心的投影线将垂直于图像平面。 平行投影常用于机械和建筑绘图，因为这种投影方式可以保持直线的平行，也可以保持平行于图像平面的平面对象的大小和形状。
平行投影的优点也是它的局限性。在我们的日常生活中，物体离得越远，看上去就越小，正因如此，延伸到远处的平行直线看上去并不平行。这是因为眼睛和照相机不会从一个单一的观察方向采集光线；它们采集通过一个特定观察点(viewpoint)的光线。正如文艺复兴以来艺术家们所认为的那样，我们可以通过透视投影生成自然视图(natural-looking views)：我们只是沿着穿过一个点（观察点）的直线投影，而不是沿着平行线投影（图4.4）。通过这种方式，离观察点更远的物体在投影时就会很自然地变得更小。一个透视图取决于选择的观察点（而不是投影方向）和成像平面。和平行视图一样，也存在倾斜和非倾斜的透视图；其区别在于是否是基于图像中心的投影方向进行投影。
你也许已经学习过三点透视的艺术规范（一种手工构造透视图的方法）（图4.5）。关于透视图的一个令人惊讶的事实是，如果我们遵循透视图下的简单数学规则，那么透视图绘制的所有规则都将被自动遵循：物体直接被投射到眼睛，它们被绘制在眼前看到的视图平面上。
图4.5 在三点透视中，艺术家定义了平行线交会的消失点(vanishing points)。平行水平线将在水平线上相交于一点。每个平行线集合都有自己的消失点。如果我们实现的透视投影基于正确的几何原则，这些规则将被自动遵循。</description></item><item><title>4.3 视线的计算</title><link>https://sujingclg.github.io/docs/chapter04/4-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/chapter04/4-3/</guid><description>4.3 视线的计算 # Computing View Rays
我们已经在前面的部分中学习到了光线产生的基本工具是观察点（或者说观察方向）和成像平面。有很多方法计算摄像机几何的细节；在本节中，我们将阐述一种基于标准正交基(orthonormal bases)的方法，它可以支持常规视图、倾斜平行视图和正交视图。
为了生成射线，我们首先需要一个射线的数学表达式。射线实际上只是一个原点和一个传播方向；一个三维参数线就是个理想的射线。正如我们在2.7.7节讨论的那样，成像平面上从眼睛e发出，经过点s的三维参数线(图4.6)由下式定义：
\[{\rm p}(t) = {\rm e} &amp;#43; t ({\rm s} - {\rm e})\] 图4.6 从人眼发出的射线穿过图像平面上一点 上式应该以这种方式解读：“我们从e沿着向量(s-e)前进t个距离来找到点p”。所以给定一个t，我们可以定义一个点p。点e是是射线的起点，s-e是射线的方向。
注意，p(0) = e，p(1) = s，更一般的，如果0 &amp;lt; t~1~ &amp;lt; t~2~，那么p(t~1~)将比p(t~2~)距离眼睛更近。同样地，如果t &amp;lt; 0，那么p(t)将在眼睛的“后方”。这些事实在我们查找视线范围内的（不在眼睛后方）、被光线照射到的、离观察者最近的物体时会很有用。
注意：我们对变量 t 进行了重载，它是射线的参数，也是图像顶部边缘的v坐标(v-coordinate)。 光线在代码中总是使用某种存储了位置和方向的结构体或对象来表示。例如，在一个object-oriented程序中我们可能写出如下程序：
class Ray Vec3 o | ray origin Vec3 d | ray direction Vec3 evaluate(real t) return o + td 我们假定Vec3类表示了一个三维向量，并且支持常规的算术运算。
为了计算一个视线(viewing ray)，我们需要知道 e (已经给出) 和 s 。求解 s 似乎很复杂，但如果我们从正确的坐标系下看此问题，就会发现他实际上是显而易见的。</description></item><item><title>4.4 光线对象求交</title><link>https://sujingclg.github.io/docs/chapter04/4-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/docs/chapter04/4-4/</guid><description>4.4 光线-对象求交 # Ray-Object Intersection
现在我们已经生成了一条光线 e + td ，接下来我们需要找到 t &amp;gt; 0 时与任意物体的第一个交点。在实践中，它常用于解决一个稍微更一般的问题：求出光线和曲面上的点t在区间[t0, t1]上的第一个交点。基本的光线求交的两个边界条件是 t0 = 0时 和 t1 = +∞ 时。我们会在球体和三角形的例子中解决此问题，并在下个小节中讨论多个物体的情况。
4.4.1 光线-球体求交 # Ray-Sphere Intersection
已知射线 p(t) = e + td 和隐式曲面 f(p) = 0 (见2.7.3节)，我们想知道它们在哪里相交。交点必须同时满足射线方程和隐式曲面方程，所以我们要求的t值就是解下列方程的值。
\[f({\rm \pmb{p}}(t)) = 0 \quad 或 \quad f({\rm e} &amp;#43; t{\rm d}) = 0\] 圆心 c = (xc, yc, zc)，半径 R 的球面可以用如下隐式方程表示
\[(x - x_c)^2 &amp;#43; (y - y_c)^2 &amp;#43; (z - z_c)^2 -R^2 = 0\] 我们也可以把上面的方程写成如下的向量形式：</description></item></channel></rss>