<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on 计算机图形学基础</title><link>https://sujingclg.github.io/posts/</link><description>Recent content in Blog on 计算机图形学基础</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 03 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://sujingclg.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Games101 笔记</title><link>https://sujingclg.github.io/posts/games101-note/</link><pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/posts/games101-note/</guid><description>之前的内容
从长宽比和垂直方向的可视角度可以推算出水平方向的可视角度。此外也可推算出正交投影的远近、左右、上下信息。
光栅化 (Rasterization) # 离散化三角形 (Triangles) # What is a screen?
An array of pixels Size of the array: resolution A typical kind of raster display Raster == screen in German（屏幕的德语词汇）
Rasterize == drawing onto the screen Pixel (FYI, short for “picture element”)
For now: A pixel is a little square with uniform color Color is a mixture of (red, green, blue) 光栅化步骤 # 从变换空间[-1,1]^3^映射到到屏幕空间。首先忽略z方向，使用视口变换将xy空间映射到屏幕。</description></item><item><title>Creating a New Theme</title><link>https://sujingclg.github.io/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://sujingclg.github.io/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://sujingclg.github.io/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://sujingclg.github.io/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://sujingclg.github.io/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item></channel></rss>